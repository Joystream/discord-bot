# Run codegen using: npm run generate
# Make sure schema endpoint is accessible!
schema:
  - https://orion.joystream.org/graphql # Atlas

documents:
  - >
    query getVideoById($videoId: String!) {
      videoByUniqueInput(where: {id: $videoId}) {
            ...VideoFields        
      }
    }

    fragment VideoFields on Video {
      id
      title
      description
      reactions {
        id
        createdAt
        reaction
        member{
          id
          handle
        }
        __typename
      }
      category {
        id
        name
        __typename
      }
      viewsNum
      duration
      createdAt
      isPublic
      isExplicit
      hasMarketing
      isCensored
      isCommentSectionEnabled
      commentsCount
      language 
      publishedBeforeJoystream
      mediaMetadata {
        ...VideoMediaMetadataFields
        __typename
      }
      media {
        ...StorageDataObjectFields
        __typename
      }
      thumbnailPhoto {
        ...StorageDataObjectFields
        __typename
      }
      channel {
        ...BasicChannelFields
        __typename
      }
      license {
        ...LicenseFields
        __typename
      }
      nft {
        ...AllNftFields
        __typename
      }
      __typename
    }

    fragment VideoMediaMetadataFields on VideoMediaMetadata {
      id
      pixelHeight
      pixelWidth
      __typename
    }

    fragment StorageDataObjectFields on StorageDataObject {
      id
      createdAt
      size
      isAccepted
      ipfsHash
      storageBag {
        id
        __typename
      }
      type {
        __typename
      }
      __typename
    }

    fragment BasicChannelFields on Channel {
      id
      title
      createdAt
      videoViewsNum
      followsNum
      avatarPhoto {
        ...StorageDataObjectFields
        __typename
      }
      ownerMember {
        ...NftOwnerMember
        __typename
      }
      __typename
    }

    fragment NftOwnerMember on Membership {
      id
      handle
      controllerAccount
      metadata {
        avatar {
          ... on AvatarObject {
            avatarObject {
              ...StorageDataObjectFields
              __typename
            }
            __typename
          }
          ... on AvatarUri {
            avatarUri
            __typename
          }
          __typename
        }
        about
        __typename
      }
      __typename
    }

    fragment LicenseFields on License {
      id
      code
      attribution
      customText
      __typename
    }

    fragment AllNftFields on OwnedNft {
      id
      createdAt
      creatorRoyalty
      lastSaleDate
      lastSalePrice
      owner {
        # ...NftOwnerMember
        # ...BasicChannelFields
        __typename
      }

      transactionalStatus {
        __typename
        ... on TransactionalStatusIdle {
          phantom
          __typename
        }
        ... on TransactionalStatusBuyNow {
          price
          __typename
        }
      }
      video {
        ...BasicVideoFields
        __typename
      }
      __typename
    }

    fragment BasicBidFields on Bid {
      bidder {
        ...NftOwnerMember
        __typename
      }
      amount
      createdAt
      isCanceled
      createdInBlock
      id
      __typename
    }

    fragment BasicVideoFields on Video {
      id
      title
      viewsNum
      createdAt
      duration
      title
      isPublic
      media {
        ...StorageDataObjectFields
        __typename
      }
      channel {
        ...BasicChannelFields
        __typename
      }
      thumbnailPhoto {
        ...StorageDataObjectFields
        __typename
      }
      nft {
        ...BasicNftFields
        __typename
      }
      __typename
    }

    fragment BasicNftFields on OwnedNft {
      id
      createdAt
      creatorRoyalty
      owner {
        # ...NftOwnerMember
        __typename
      }
      transactionalStatus {
        __typename
      }
      __typename
    }

  - >
    query getDistributionBucketsWithOperators {
      distributionBuckets(limit: 50, where: {distributing_eq: true}) {
        id
        bags {
          id
          __typename
        }
        operators {
          ...DistributionBucketOperatorField
          __typename
        }
        __typename
      }
    }

    fragment DistributionBucketOperatorField on DistributionBucketOperator {
      id
      metadata {
        nodeEndpoint
        __typename
      }
      status
      __typename
    }

generates:
  ./src/qntypes-atlas.ts:
    plugins:
      - typescript
      - typescript-operations
      - typescript-graphql-request
